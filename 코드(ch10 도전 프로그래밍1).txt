<도전1>
#include <stdio.h>
int main()
{
	int num;
	printf("정수를 입력: ");
	scanf("%d", &num); // 10진수 형태로 정보를 저장

	printf("16진수 형태로 출력 : %x \n", num); // 16진수 형태로 출력하기 위해 서식문자 활용
	return 0;
}

<도전2>
#include <stdio.h>

void gugu(int n1, int n2)
{
	int x;
	if (n1 > n2)
	{
		while(n2<=n1) // while과 for문의 용도? : while은 임의의 값을 조건으로 설정해야하는 경우. for문은 반복문 횟수가 정해진 경우.
		{
			for (x = 1; x < 10; x++)
				printf("%d*%d = %d \n", n2, x, n2 * x);
			printf("\n"); // 단과 단 사이를 구분.
			n2++;
		}
	}
	else
	{
		while(n1<=n2)
		{
			for (x = 1; x < 10; x++)
				printf("%d*%d = %d \n", n1, x, n1 * x);
			printf("\n");
			n1++;
		}
	}
}

int main()
{
	int n1, n2;
	printf("두개의 입력한 정수로부터 구구단을 출력하는 프로그램 \n");
	printf("두 개의 정수를 입력 : "); // main함수에서 입력을 받아야하는 이유?
	scanf("%d %d", &n1, &n2); //  => gugu함수 내에서 입력을 받으려면 gugu함수 내에 변수선언이 필요.
	// 입력받은 값이 gugu함수 내에서만 존재하게 됨 따라서 코드가 복잡해졌을 때 효율성이 조금 떨어진다고 볼 수 있음. 
	gugu(n1, n2);

	return 0;
}

<도전2 답안>
#include <stdio.h>

void NineNine(int num1, int num2); 

int main(void)
{
	int num1, num2;

	printf("두개의 정수 입력 : ");
	scanf("%d %d", &num1, &num2);

	if (num1 < num2)
		NineNine(num1, num2);
	else
		NineNine(num2, num1);
	// num1 과 num2의 자리를 교체해주는 것만으로 크기 문제를 해결.
	return 0;
}

/* num1단부터 num2단까지 출력 */
void NineNine(int num1, int num2)
{
	int i;

	while (num1 <= num2)
	{
		for (i = 1; i < 10; i++)
			printf("%d * %d = %d \n", num1, i, num1 * i);
		printf("\n");
		num1++;
	}
}

<도전3>
#include <stdio.h>

int GOM(int num1, int num2)
{
	int x, i;

	for (i = 1; i <= num1; i++)
	{
		if (num1 % i == 0 && num2 % i == 0)
		{
			x = i; // x에 공약수를 작은 수부터 차례로 저장. if문을 num1,num2중 작은 값까지 실행하고 빠져나오게 된다.
		}
	}
	return x; // 가장 마지막에 저장된 공약수(최대공약수)를 반환.
}

int main()
{
	int num1, num2;
	printf("두개의 정수를 입력: ");
	scanf("%d %d", &num1, &num2);
	printf("두 정수의 최대공약수 %d \n", GOM(num1, num2));

	return 0;
}


<도전3 답안>
#include<stdio.h>

int GCM(int num1, int num2);

int main(void)
{
	int num1, num2;

	printf("두 개의 정수 입력 : ");
	scanf("%d %d", &num1, &num2);

	printf("GCM : %d \n", GCM(num1, num2));
	return 0;
}

int GCM(int num1, int num2)
{
	int result;
	result = num1;
	while (num1 % result != 0 || num2 % result != 0) 
		result--; // num1과 num2중 어떤 값을 기준으로 잡든 작은 값에서부터 공약수를 구하게 된다.
	return result; // 처음으로 반복문을 빠져나오는 값이 최대공약수.
}


<도전3 유클리드 호제법>
#include <stdio.h>

int GCM(int num1, int num2)
{ 
	int x = num1;
	int y = num2;
	int result = x % y;
	if(result !=0) // num1>num2 가정.
	{
		while (result > 0) // result == 0 이라고 하면, 나머지가 0인 동안 반복을 의미. 나머지가 0이 되는순간 멈추기 위해서 조건을 수정.
		{
			x = y;
			y = result;
			result = x % y;
		}
		return y;
	}
	return num2;
}

int main()
{
	int num1, num2;
	printf("두개의 정수를 입력: ");
	scanf("%d %d", &num1, &num2);
	if(num1>num2)
		printf("두 정수의 최대공약수 : %d \n", GCM(num1, num2));
	else
		printf("두 정수의 최대공약수 : %d \n", GCM(num2, num1));

	return 0;
}

<도전4>
#include <stdio.h>

const int BREAD = 500; // const상수 : 이름을 지니는 상수. 변수를 상수화 -> 한번 설정한 값을 바꿀 수 없음.
const int SNACK = 700; // 선언과 동시에 초기화.
const int DRINK = 400;

void cho(int money, int dvd)
{
	int i, j, k;
	int x = money - dvd * 1500;
	for (i = 1; i < x / BREAD; i++)
	{
		for (j = 1; j < x / SNACK; j++)
		{
			for (k = 1; k < x / DRINK; k++)
			{
				if (x == BREAD * i + SNACK * j + DRINK * k)
				{
					printf("크림빵 %d개, ", i);
					printf("새우깡 %d개, ", j);
					printf("콜  라 %d개 \n", k);
				}
			}
		}
	}
}

int main(void)
{
	int money;
	int dvd;
	/*const int BREAD = 500; // const상수 : 이름을 지니는 상수. 변수를 상수화 -> 한번 설정한 값을 바꿀 수 없음.
	const int SNACK = 700; // 선언과 동시에 초기화. 
	const int DRINK = 400;*/
	/*int i, j, k; */
	
	printf("현재 당신은 얼마를 가지고 있나요? :");
	scanf("%d", &money);

	printf("DVD는 1500원 입니다. 몇개를 빌릴 건가요? \n");
	scanf("%d", &dvd);
	printf("현재 잔고는 %d원 입니다. 구매가능한 리스트입니다. \n", money - dvd * 1500);
	printf("\n");

	

	cho(money, dvd); // 

	/*for (i = 1; i < money / BREAD; i++)
	{
		for (j = 1; j < money / SNACK; j++)
		{
			for (k = 1; k < money / DRINK; k++)
			{
				if (money == BREAD * i + SNACK * j + DRINK * k)
				{
					printf("크림빵 %d개, ", i);
					printf("새우깡 %d개, ", j);
					printf("콜  라 %d개 \n", k);
				}
			}
		}
	}
	printf("\n");*/
	printf("어떻게 구입하시겠습니까? \n");

	return 0;
}



<도전4 답안>
#include<stdio.h>

const int BREAD = 500; // const상수 : 이름을 지니는 상수. 변수를 상수화 -> 한번 설정한 값을 바꿀 수 없음.
const int SNACK = 700; // 선언과 동시에 초기화. 
const int DRINK = 400;

int main(void)
{
	int i, j, k;
	int money;
	printf("현재 당신이 소유하고 있는 금액 : ");
	scanf("%d", &money);

	for (i = 1; i < money / BREAD; i++)
	{
		for (j = 1; j < money / SNACK; j++)
		{
			for (k = 1; k < money / DRINK; k++)
			{
				if (money == BREAD * i + SNACK * j + DRINK * k)
				{
					printf("크림빵 %d개, ", i);
					printf("새우깡 %d개, ", j);
					printf("콜  라 %d개 \n", k);
				}
			}
		}
	}

	printf("어떻게 구입하시겠습니까? \n");
	return 0;
}

<도전5> 답안
#include<stdio.h>

int IsPrime(int n);

int main(void)
{
	int i = 2, cnt = 0;

	while (cnt != 10) // 10번 실행.
	{
		if (IsPrime(i) == 1)
		{
			printf("%d ", i);
			cnt++;
		}
		i++;
	}
	return 0;
}

int IsPrime(int n)	   // 소수면 true(1) 리턴
{
	int divisors = 0, i;

	for (i = 1; i <= n; i++)
	{
		if (n % i == 0)
			divisors++;
	}

	if (divisors == 2) // 모든 숫자를 다 나누었을 때 딱 두번 나누어 떨어지는 경우만 출력.
		return 1;

	return 0;
}

<도전6>
#include <stdio.h>

int main()
{
	int num;
	int hour, min, sec;

	printf("초를 입력하세요 : ");
	scanf("%d", &num);

	hour = num / 3600;
	min = (num - (hour * 3600)) / 60;
	sec = num - (hour * 3600) - (min * 60);

	printf("[%d시, %d분, %d초] \n", hour, min, sec);
	return 0;
}

<도전6 답안>
#include<stdio.h>

const int H = 60 * 60; // 시간을 초로 바꾸는 상수
const int M = 60; // 분을 초로 바꾸는 상수

void SecondToHMS(int sec);

int main(void)
{
	int sec;

	printf("초(second) 입력 : ");
	scanf("%d", &sec);
	SecondToHMS(sec);

	return 0;
}

void SecondToHMS(int sec)
{
	int h, m, s;

	/*시 구하기 */
	h = sec / H;
	sec = sec % H; // 시간으로 전환 후 남은 초

	/*분 구하기 */
	m = sec / M;
	sec = sec % M; // 분으로 전환 후 남은 초

	/*초 구하기 */
	s = sec;

	printf("[h:%d, m:%d, s:%d] \n", h, m, s);
}


<도전7>
#include <stdio.h>

int max(int n);

int main()
{
	int n;

	printf("상수 n을 입력하세요: ");
	scanf("%d", &n);
	if (n == 0)
	{
		printf("0보다 큰 상수 입력 : ");
		return 0;
	}

	printf("공식을 만족하는 k의 최댓값 : %d", max(n));

	return 0;
}

int max(int n)
{
	int k;
	int result = 1;

	for (k = 0; result*2 <= n; k++) // 조건이 한번 성립하면 k=1, 두번 성립하면 k=2가 반환. -> 횟수와 일치.
		result = result * 2; // 2의 거듭제곱을 만드는 식. 조건 시작값이 2인 이유는 추가되는 연산 횟수를 막기위해서.
	return k;
}

<도전7 답안>
#include <stdio.h>

int main(void)
{
	int n, k;
	int inc = 1;

	printf("상수 n 입력 : ");
	scanf("%d", &n);

	if (n == 0)
	{
		printf("만족하는 k 없음 \n");
		return 0;
	}

	for (k = 0; inc * 2 <= n; k++) // k=0에서 시작하는 것과 inc*2가 조건에 걸리는 점이 내 코드와 차이점.
	{
		inc = inc * 2;
	}

	printf("공식을 만족하는 k : %d \n", k);
	return 0;;
}

<도전 8>
#include <stdio.h>

int recur(int n)
{
	if (n <= 0)
		return 1;
	else
		return 2 * recur(n-1);
}

int main()
{
	int n;

	printf("양의 정수 n을 입력 : ");
	scanf("%d", &n);
	printf("2의 %d승은 %d \n", n, recur(n));
	return 0;
}














